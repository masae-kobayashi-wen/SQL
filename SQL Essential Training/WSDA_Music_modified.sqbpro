<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/mkoba/Documents/Calbright College related/Data Anlysis Track/Competency 3 - SQL/WSDA_Music.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="241"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3930"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainTrack"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Album" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/><column index="2" value="219"/><column index="3" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Artist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="147"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Customer" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="83"/><column index="2" value="71"/><column index="3" value="83"/><column index="4" value="294"/><column index="5" value="264"/><column index="6" value="132"/><column index="7" value="44"/><column index="8" value="96"/><column index="9" value="80"/><column index="10" value="128"/><column index="11" value="122"/><column index="12" value="183"/><column index="13" value="98"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Genre" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="59"/><column index="2" value="112"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Invoice" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="83"/><column index="3" value="129"/><column index="4" value="264"/><column index="5" value="132"/><column index="6" value="80"/><column index="7" value="96"/><column index="8" value="116"/><column index="9" value="53"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="94"/><column index="2" value="68"/><column index="3" value="56"/><column index="4" value="65"/><column index="5" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Playlist" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="67"/><column index="2" value="155"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="PlaylistTrack" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="67"/><column index="2" value="56"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Track" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="56"/><column index="2" value="145"/><column index="3" value="61"/><column index="4" value="90"/><column index="5" value="59"/><column index="6" value="190"/><column index="7" value="84"/><column index="8" value="77"/><column index="9" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter><filter value="unavail"/></global_filter></table><table schema="main" name="V_AvgTotal" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="160"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="V_Tracks_InvoiceLine" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="65"/><column index="3" value="64"/><column index="4" value="134"/><column index="5" value="204"/><column index="6" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Ch3">SELECT AlbumId
FROM Album

-- for chapter 3 discussion activity</sql><sql name="Ch4">/*
Ctreated By: Masae Wen
Create Date: 05/23/2024
Description: This query displays all customer's first, last names and email addresses.
*/

SELECT 
	FirstName AS [Customer First Name],
	LastName AS 'Customer Last Name',
	Email AS EMAIL
FROM 
	Customer
ORDER BY 
	FirstName ASC,
	LastName DESC
LIMIT 10	

	</sql><sql name="Ch4.Q">/*

Created By: Masae Wen

Create Date: 05/23/2024

Description: 

- Code Challenge: Concise track pricing report

- Generate a report listing track names alongside their unit prices

	

Note:

Resulting field names: Track Name, Price

- Name = &quot;Track Name&quot;

- UnitPrice = &quot;Price&quot;

Only include the first 20 tracks, sorted by track name 

State the purpose of Query

*/

SELECT 
	t.Name AS &quot;Track Name&quot;, -- 'Track Name', [Track Name] all work.
	t.UnitPrice AS Price
FROM 
	Track t
ORDER BY 
	t.Name -- Name works too
LIMIT 20;

	</sql><sql name="Ch5">/*
Created By: Masae Wen
Create Date: 05/24/2024
Description: Which city accounts for our top performers?
*/

/*
WSDA Music Sales Goal:
They want as many customer as possible to spend $7.00 and $15.00 

Sales categories: 
Baseline Purchase - Between $0.99 and $1.99
Low Purchase - Between $2.00 and $6.99
Target Purchase - Between $7.00 and $15.00
Top Performer - Above $15.00
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total,
	CASE 
	WHEN total &lt; 2.00 THEN 'Baseline Purchase'
	WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
	WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
	ELSE 'Top Performer'
	END AS PurchaseType
FROM
	Invoice
WHERE
	PurchaseType = 'Top Performer'
ORDER BY
	BillingCity
</sql><sql name="Ch5 Q">/*
Created By: Masae Wen
Create Date: 05/24/2024
Description: 
- Code Challenge: Categorize tracks by price
- Write SQL that selects track names, composers, and unit prices and categorizes each track based on its price
- to offer insights into range of music available for purchase
	
Price Categories:
Budget: Tracks priced at $0.99 or less
Regular: Tracks priced between $1.00 and $1.49
Premium: Tracks priced between $1.50 and $1.99
Exclusive: Tracks priced above $1.99

Note:
Resulting field names: Track Name, Composer, Price
The PriceCategory field contains categories as defiend above
The results should be ordered by the UnitPrice in ascending order
State the purpose of Query
*/

SELECT
	Name AS 'Track Name',
	Composer,
	UnitPrice AS Price,
	CASE
		WHEN UnitPrice &lt; 1.00 THEN 'Budget'
		WHEN UnitPrice BETWEEN 1.00 AND 1.49 THEN 'Regular'
		WHEN UnitPrice BETWEEN 1.50 AND 1.99 THEN 'Premium'
		ELSE 'Exclusive'
	END AS PriceCategory
FROM
	Track
ORDER BY
	UnitPrice;
</sql><sql name="Ch6">/*
Created By: Masae Wen
Create Date: 05/25/2024
Description: JOINS on more than two tables | What employees are responsible for the 10 highest individual sales?
*/

SELECT
	e.FirstName AS 'Employee FisrtName',
	e.LastName AS 'Employee LastName',
	e.EmployeeId,
	c.FirstName AS 'Customer FirstName',
	c.LastName AS 'Customer LastName',
	c.SupportRepId,
	i.CustomerId,
	i.total
FROM 
	Invoice AS i
INNER JOIN
	Customer AS c
ON
	i.CustomerId = c.CustomerId
INNER JOIN
	Employee AS e
ON
	c.SupportRepId = e.EmployeeId
ORDER BY
	i.total DESC
LIMIT 10
</sql><sql name="Ch6 Q">/*
Created By: Masae Wen
Create Date: 05/25/2024
Description: list each customer along with their assigned support representative

Note:
list contains the first and last names of both customers and their assigned support representatives
Customer FirstName/LastName, Employee FirstName/LastName
Order the results by the support representative's last name, followed by the customer's last name

*/

SELECT
	c.FirstName AS CustomerFirstName,
	c.LastName AS CustomerLastName,
	e.FirstName AS SupportRepFirstName,
	e.LastName AS SupportRepLastName
FROM
	Customer AS c
	JOIN Employee AS e ON c.SupportRepId = e.EmployeeId
ORDER BY
	e.LastName,
	c.LastName;</sql><sql name="Ch7">/*
Created By: Masae Wen
Create Date: 05/26/2024
Description: AGGREGATE Functions | What are our all time global sales?
*/

SELECT
	SUM(Total) AS [Total Sales],
	round(AVG(Total),2) AS [Average Sales],
	MAX(Total) AS [Maximun Sale],
	MIN(Total) AS [Minimum Sale],
	COUNT(*) AS [Sales Count]
FROM
	Invoice
</sql><sql name="Ch7 Q">/*
Created By: Masae Wen
Create Date: 05/26/2024
Description: Select customer's full name and transforms their postal code into a standardized five-digit format.

Note:
a list containing two columns: CustomerFullName and StandardizedPostalCode
Result should only include customers from the US
Order the results by the CustomerFullName field
*/

SELECT
	c.FirstName || ' ' || c.LastName AS CustomerFullName,
	substr(c.PostalCode,1,5) AS StandardizedPostalCode
FROM
	Customer AS c
WHERE
	c.Country = 'USA'
ORDER BY
	CustomerFullName;
	</sql><sql name="Ch8">/*
Created by: Masae Wen
Create Date: 05/27/2024
Description: Grouping by more than one filed at a time | What are the average invoice totals by billing country and city?
*/

SELECT
	BillingCountry,
	BillingCity,
	round(avg(total),2)
FROM
	Invoice
GROUP BY
	BillingCountry, BillingCity
ORDER BY
	BillingCountry
	</sql><sql name="Ch8 Q">/*
Created By: Masae Wen
Create Date: 05/27/2024
Description: Calculate average spending amount of customers in each City?

Note:
a list containing two columns: City and AverageSpending
The list should be in ascending order by city name
Average spending amount should be rounded to two decimal places
*/

SELECT
	BillingCity AS City,
	round(avg(total),2) AS AverageSpending
FROM
	Invoice i
GROUP BY
	BillingCity
ORDER BY
	City ASC;
</sql><sql name="Ch9.1">/*
Created By: Masae Wen
Create Date: 07/04/2024
Description: Subqueries | Gather data about all invoices that are less than the global average
*/

-- find Global average sales amount
SELECT 
	round(AVG(Total),2) AS [Average Total]
FROM
	Invoice;

-- find invoices that are less than the global average
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	Invoice
WHERE
	total &lt;
		(SELECT round(AVG(Total),2) FROM Invoice)
ORDER BY
	total DESC;
	</sql><sql name="Ch9.2">/*
Created By: Masae Wen
Create Date: 07/04/2024
Description: Subqueries in the SELECT | How is each city performing against global average sales?
*/

SELECT
	BillingCity,
	round(AVG(Total),2) AS [City Average],
	(SELECT round(AVG(Total),2) FROM Invoice) AS [Global Average]
FROM
	Invoice
GROUP BY
	BillingCity
ORDER BY
	BillingCity;
	</sql><sql name="Ch9.3">/*
Created By: Masae Wen
Create Date: 07/04/2024
Description: Subqueries without Aggregate Functions | Give all the invoices that have occurred after invoice date of invoice id (251)
*/

-- find the date of this InvoiceId first
SELECT
	InvoiceDate
FROM
	Invoice
WHERE
	InvoiceId = 251;

-- find the invoices after the identified date above
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity	
FROM
	Invoice
WHERE
	InvoiceDate &gt; 
		(SELECT
			InvoiceDate
		FROM
			Invoice
		WHERE
			InvoiceId = 251);




	</sql><sql name="Ch9.4">/*
Created By: Masae Wen
Create Date: 07/04/2024
Description: Returning multiple values from a subquery | Find if any other purchases were made on the invoice dates of the invoice id (251, 252, 254)
*/

-- find the dates of these InvoiceId first
SELECT
	InvoiceDate
FROM
	Invoice
WHERE
	InvoiceId IN (251, 252, 254);

-- find the invoices that match the dates identified above
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity	
FROM
	Invoice
WHERE
	InvoiceDate IN 
		(SELECT
			InvoiceDate
		FROM
			Invoice
		WHERE
			InvoiceId IN (251, 252, 254));




	</sql><sql name="Ch9.5">/*
Created By: Masae Wen
Create Date: 07/04/2024
Description: Subqueries and DISTINCT | Which tracks are not selling?
*/

-- find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;
	
-- find all the TrackId that are not selling
SELECT
	TrackId,
	Composer,
	Name
FROM
	Track
WHERE
	TrackId NOT IN 
		(SELECT
			DISTINCT TrackId
		FROM
			InvoiceLine
		ORDER BY
			TrackId);




	</sql><sql name="Ch9_Q">/*
Created By: Masae Wen
Create Date: 07/06/2024
Description: Write a SQL query that identifies tracks that never been sold.

Note:
- Return a list of the Track ID, Track Name, Composer, and Genre
for each track that has never been sold.
- Order by Track Name in ascending order
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;
	
-- 2.1 Need to join Track and Genre for Genre Name
-- 2.2 Compare the LEFT and INNER JOIN
SELECT
	t.TrackId,
	t.Name,
	t.Composer,
	g.Name
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId; -- 3503 rows

SELECT
	t.TrackId,
	t.Name,
	t.Composer,
	g.Name
FROM
	Track AS t
JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId; -- 3503 rows
	
-- 3. find all the TrackId that are not selling
-- solution1
SELECT
	t.TrackId AS 'Track ID',
	t.Name AS 'Track Name',
	t.Composer,
	g.Name AS Genre
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId NOT IN 
		(SELECT
			DISTINCT il.TrackId
		FROM
			InvoiceLine AS il
		ORDER BY
			il.TrackId)
ORDER BY
	t.Name;

-- solution2
SELECT
	t.TrackId AS &quot;Track ID&quot;,
	t.Name AS &quot;Track Name&quot;,
	t.Composer,
	g.Name AS Genre
FROM
	Track t
	JOIN Genre g ON t.GenreId = g.GenreId
WHERE
	t.TrackId NOT IN (
		SELECT DISTINCT il.TrackId
		FROM InvoiceLine il
	)
ORDER BY
	&quot;Track Name&quot; ASC;

-- 4. Create TABLE
CREATE TABLE Ch9_Q AS
SELECT
	t.TrackId AS 'Track ID',
	t.Name AS 'Track Name',
	t.Composer,
	g.Name AS Genre
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId NOT IN 
		(SELECT
			DISTINCT il.TrackId
		FROM
			InvoiceLine AS il
		ORDER BY
			il.TrackId)
ORDER BY
	t.Name;
	




	</sql><sql name="Ch9_Q1">/*
Created By: Masae Wen
Create Date: 07/06/2024
Description: Write a SQL query that identifies Top 100 selling tracks.

Note:
- Return a list of the Track ID, Track Name, Composer, and Genre
for Top 100 selling tracks.
- Order by TotalSell of each track.
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;

-- 2. find Top 100 selling TrackId
SELECT
	TrackId,
	SUM(UnitPrice) AS TotalSell
FROM
	InvoiceLine
GROUP BY
	TrackId
ORDER BY
	TotalSell DESC;
	
-- 3.1 Need to join Track, Genre, InvoiceLine for Genre Name and UnitPrice
SELECT
	t.TrackId,
	t.Name AS TrackName,
	t.Composer,
	g.Name AS Genre,
	SUM(il.UnitPrice) AS TotalSell
FROM
	Track AS t
	LEFT JOIN Genre AS g
		ON t.GenreId = g.GenreId
	LEFT JOIN InvoiceLine AS il
		ON t.TrackId = il.TrackId
GROUP BY
	t.TrackId
ORDER By
	TotalSell DESC; -- 3503 rows (including tracks without sells)
	
-- 3.2 Compare the LEFT and INNER JOIN
SELECT
	t.TrackId,
	t.Name AS TrackName,
	t.Composer,
	g.Name AS Genre,
	SUM(il.UnitPrice) AS TotalSell
FROM
	Track AS t
	JOIN Genre AS g
		ON t.GenreId = g.GenreId
	JOIN InvoiceLine AS il
		ON t.TrackId = il.TrackId
GROUP BY
	t.TrackId
ORDER By
	TotalSell DESC; -- 1984 rows (excluding tracks without sells)

-- 4. Create TABLE
CREATE TABLE Ch9_Q1 AS
SELECT
	t.TrackId,
	t.Name AS TrackName,
	t.Composer,
	g.Name AS Genre,
	SUM(il.UnitPrice) AS TotalSell
FROM
	Track AS t
	LEFT JOIN Genre AS g
		ON t.GenreId = g.GenreId
	LEFT JOIN InvoiceLine AS il
		ON t.TrackId = il.TrackId
GROUP BY
	t.TrackId
ORDER By
	TotalSell DESC; -- 3503 rows (including tracks without sells)
	</sql><sql name="Ch9_Q2">/*
Created By: Masae Wen
Create Date: 07/06/2024
Description: Write a SQL query that identifies tracks with top Max total sell ($3.98).

Note:
- Return a list of the Track ID, Track Name, Composer, and Genre
for Top 100 selling tracks.
- Order by TotalSell of each track.
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;

-- 2. find TrackId with top total sell of $3.98.
SELECT
	TrackId,
	TrackName,
	Composer,
	Genre,
	TotalSell
FROM
	Ch9_Q1
WHERE
	TotalSell = (SELECT MAX(TotalSell) FROM Ch9_Q1); -- need to use compound select extrac the max value 3.98 first 
	
-- 3. Create TABLE
CREATE TABLE Ch9_Q2 AS
SELECT
	TrackId,
	TrackName,
	Composer,
	Genre,
	TotalSell
FROM
	Ch9_Q1
WHERE
	TotalSell = (SELECT MAX(TotalSell) FROM Ch9_Q1);



	</sql><sql name="Ch9_Q3">/*
Created By: Masae Wen
Create Date: 07/09/2024
Description: Write a SQL query that identifies tracks that never been sold &amp; count by Composer
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;
	
-- 2. Count all the track by Composer
SELECT
	Composer,
	COUNT(Composer) AS Count
FROM
	Track
GROUP BY
	Composer
ORDER BY
	Count DESC; -- 1475 rows
	
-- 3. Count not selling track by composer
SELECT
	t.Composer,
	COUNT(t.Composer) AS Count
FROM
	Track AS t
WHERE
	t.TrackId NOT IN 
		(SELECT
			DISTINCT il.TrackId
		FROM
			InvoiceLine AS il
		ORDER BY
			il.TrackId)
GROUP BY
	t.Composer
ORDER BY
	Count DESC; -- 838 rows

-- 4. Create TABLE (not selling)
CREATE TABLE Ch9_Q3 AS
SELECT
	t.Composer,
	COUNT(t.Composer) AS Count
FROM
	Track AS t
WHERE
	t.TrackId NOT IN 
		(SELECT
			DISTINCT il.TrackId
		FROM
			InvoiceLine AS il
		ORDER BY
			il.TrackId)
GROUP BY
	t.Composer
ORDER BY
	Count DESC; 

-- 5. Create TABLE (all)
CREATE TABLE Ch9_Q3a AS
SELECT
	Composer,
	COUNT(Composer) AS Count
FROM
	Track
GROUP BY
	Composer
ORDER BY
	Count DESC;
	
-- 6. find % of NotSell/AllSell per Composer
SELECT
	ns.Composer,
	ns.Count AS NotSellCount,
	s.Count AS AllSellCount,
	round((CAST (ns.Count AS FLOAT)/s.Count)*100,2) AS NotSellPercent
FROM
	Ch9_Q3 AS ns -- NotSell
LEFT JOIN
	Ch9_Q3a AS s -- AllSell, as does not work
ON
	ns.Composer = s.Composer
ORDER BY
	NotSellPercent DESC; -- 838 rows
	
-- 7. Create TABLE (NotSellPercent)
CREATE TABLE Ch9_Q3b AS
SELECT
	ns.Composer,
	ns.Count AS NotSellCount,
	s.Count AS AllSellCount,
	round((CAST (ns.Count AS FLOAT)/s.Count)*100,2) AS NotSellPercent
FROM
	Ch9_Q3 AS ns -- NotSell
LEFT JOIN
	Ch9_Q3a AS s -- AllSell, as does not work
ON
	ns.Composer = s.Composer
ORDER BY
	NotSellPercent DESC; -- 838 rows

--8. Troubleshoting
SELECT 11/44; -- resulting 0...wrong
SELECT CAST(11 AS FLOAT) / 44; -- resulting 0.25...correct!
-- SQLite does not have float() function
	</sql><sql name="Ch9_Q4">/*
Created By: Masae Wen
Create Date: 07/09/2024
Description: Write a SQL query that identifies tracks that never been sold &amp; count by Genre
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;
	
-- 2. Count all the track by Genre
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
GROUP BY
	Genre
ORDER BY
	Count DESC; -- 25 rows
	
-- 3. Count not selling track by Genre
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId NOT IN 
		(SELECT
			DISTINCT il.TrackId
		FROM
			InvoiceLine AS il
		ORDER BY
			il.TrackId)
GROUP BY
	Genre
ORDER BY
	Count DESC; -- 25 rows

-- 4. Create TABLE (not selling)
CREATE TABLE Ch9_Q4 AS
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId NOT IN 
		(SELECT
			DISTINCT il.TrackId
		FROM
			InvoiceLine AS il
		ORDER BY
			il.TrackId)
GROUP BY
	Genre
ORDER BY
	Count DESC;

-- 5. Create TABLE (all)
CREATE TABLE Ch9_Q4a AS
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
GROUP BY
	Genre
ORDER BY
	Count DESC;
	
-- 6. find % of NotSell/AllSell per Genre
SELECT
	ns.Genre,
	ns.Count AS NotSellCount,
	s.Count AS AllSellCount,
	round((CAST (ns.Count AS FLOAT)/s.Count)*100,2) AS NotSellPercent
FROM
	Ch9_Q4 AS ns -- NotSell
LEFT JOIN
	Ch9_Q4a AS s -- AllSell, as does not work
ON
	ns.Genre = s.Genre
ORDER BY
	NotSellPercent DESC; -- 25 rows

-- 7. Create TABLE (NotSellPercent)
CREATE TABLE Ch9_Q4b AS
SELECT
	ns.Genre,
	ns.Count AS NotSellCount,
	s.Count AS AllSellCount,
	round((CAST (ns.Count AS FLOAT)/s.Count)*100,2) AS NotSellPercent
FROM
	Ch9_Q4 AS ns -- NotSell
LEFT JOIN
	Ch9_Q4a AS s -- AllSell, as does not work
ON
	ns.Genre = s.Genre
ORDER BY
	NotSellPercent DESC; -- 25 rows

	</sql><sql name="Ch9_Q5">/*
Created By: Masae Wen
Create Date: 07/09/2024
Description: Write a SQL query that identifies Top 100 selling tracks &amp; count by Composer
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;

-- 2. find Top 100 selling TrackId
SELECT
	TrackId,
	SUM(UnitPrice) AS TotalSell
FROM
	InvoiceLine
GROUP BY
	TrackId
ORDER BY
	TotalSell DESC
LIMIT 100;
	
-- 3. Count composer of top selling track
SELECT
	t.Composer,
	COUNT(t.Composer) AS Count
FROM
	Track AS t
WHERE
	t.TrackId IN 
		(SELECT
			il.TrackId
		FROM
			InvoiceLine AS il
		GROUP BY
			il.TrackId
		ORDER BY
			SUM(il.UnitPrice) DESC
		LIMIT 100)
GROUP BY
	t.Composer
ORDER BY
	Count DESC;

-- 4. Create TABLE
CREATE TABLE Ch9_Q5 AS
SELECT
	t.Composer,
	COUNT(t.Composer) AS Count
FROM
	Track AS t
WHERE
	t.TrackId IN 
		(SELECT
			il.TrackId
		FROM
			InvoiceLine AS il
		GROUP BY
			il.TrackId
		ORDER BY
			SUM(il.UnitPrice) DESC
		LIMIT 100)
GROUP BY
	t.Composer
ORDER BY
	Count DESC;

-- 5. find % of YesSell/AllSell per Composer
SELECT
	ys.Composer,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q5 AS ys -- YesSell
LEFT JOIN
	Ch9_Q3a AS s -- AllSell, as does not work
ON
	ys.Composer = s.Composer
ORDER BY
	YesSellPercent DESC; 

-- 6. Create TABLE (YesSellPercent)
CREATE TABLE Ch9_Q5b AS
SELECT
	ys.Composer,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q5 AS ys -- YesSell
LEFT JOIN
	Ch9_Q3a AS s -- AllSell, as does not work
ON
	ys.Composer = s.Composer
ORDER BY
	YesSellPercent DESC; </sql><sql name="Ch9_Q6">/*
Created By: Masae Wen
Create Date: 07/09/2024
Description: Write a SQL query that identifies Top 100 selling tracks &amp; count by Genre
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;

-- 2. find Top 100 selling TrackId
SELECT
	TrackId,
	SUM(UnitPrice) AS TotalSell
FROM
	InvoiceLine
GROUP BY
	TrackId
ORDER BY
	TotalSell DESC
LIMIT 100;
	
-- 3. Count Genre of top 100 seeling track
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId IN 
		(SELECT
			il.TrackId
		FROM
			InvoiceLine AS il
		GROUP BY
			il.TrackId
		ORDER BY
			SUM(il.UnitPrice) DESC
		LIMIT 100)
GROUP BY
	Genre
ORDER BY
	Count DESC;

-- 4. Create TABLE
CREATE TABLE Ch9_Q6 AS
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId IN 
		(SELECT
			il.TrackId
		FROM
			InvoiceLine AS il
		GROUP BY
			il.TrackId
		ORDER BY
			SUM(il.UnitPrice) DESC
		LIMIT 100)
GROUP BY
	Genre
ORDER BY
	Count DESC;

-- 5. find % of YesSell/AllSell per Genre
SELECT
	ys.Genre,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q6 AS ys -- YesSell
LEFT JOIN
	Ch9_Q4a AS s -- AllSell, as does not work
ON
	ys.Genre = s.Genre
ORDER BY
	YesSellPercent DESC; 

-- 6. Create TABLE (YesSellPercent)
CREATE TABLE Ch9_Q6b AS
SELECT
	ys.Genre,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q6 AS ys -- YesSell
LEFT JOIN
	Ch9_Q4a AS s -- AllSell, as does not work
ON
	ys.Genre = s.Genre
ORDER BY
	YesSellPercent DESC; </sql><sql name="Ch9_Q7">/*
Created By: Masae Wen
Create Date: 07/11/2024
Description: Write a SQL query that identifies Top selling tracks &amp; count by Composer
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;

-- 2. find TrackId with top total sell of $3.98.
SELECT
	TrackId,
	TotalSell
FROM
	Ch9_Q1
WHERE
	TotalSell = (SELECT MAX(TotalSell) FROM Ch9_Q1); -- need to use compound select extrac the max value 3.98 first 
	
-- 3. Count composer of top selling track
SELECT
	t.Composer,
	COUNT(t.Composer) AS Count
FROM
	Track AS t
WHERE
	t.TrackId IN 
		(SELECT
			q1.TrackId
		FROM
			Ch9_Q1 AS q1 -- it's Q-one not Q-L
		WHERE
			q1.TotalSell = (SELECT MAX(q1.TotalSell) FROM Ch9_Q1 AS q1))
GROUP BY
	t.Composer
ORDER BY
	Count DESC;

-- 4. Create TABLE
CREATE TABLE Ch9_Q7 AS
SELECT
	t.Composer,
	COUNT(t.Composer) AS Count
FROM
	Track AS t
WHERE
	t.TrackId IN 
		(SELECT
			q1.TrackId
		FROM
			Ch9_Q1 AS q1 -- it's Q-one not Q-L
		WHERE
			q1.TotalSell = (SELECT MAX(q1.TotalSell) FROM Ch9_Q1 AS q1))
GROUP BY
	t.Composer
ORDER BY
	Count DESC;

-- 5. find % of YesSell/AllSell per Composer
SELECT
	ys.Composer,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q7 AS ys -- YesSell
LEFT JOIN
	Ch9_Q3a AS s -- AllSell, as does not work
ON
	ys.Composer = s.Composer
ORDER BY
	YesSellPercent DESC; 

-- 6. Create TABLE (YesSellPercent)
CREATE TABLE Ch9_Q7b AS
SELECT
	ys.Composer,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q7 AS ys -- YesSell
LEFT JOIN
	Ch9_Q3a AS s -- AllSell, as does not work
ON
	ys.Composer = s.Composer
ORDER BY
	YesSellPercent DESC; </sql><sql name="Ch9_Q8">/*
Created By: Masae Wen
Create Date: 07/11/2024
Description: Write a SQL query that identifies Top selling tracks &amp; count by Genre.
*/

-- 1. find all the unique selling TrackId
SELECT
	DISTINCT TrackId
FROM
	InvoiceLine
ORDER BY
	TrackId;

-- 2. find TrackId with top total sell of $3.98.
SELECT
	TrackId,
	TotalSell
FROM
	Ch9_Q1
WHERE
	TotalSell = (SELECT MAX(TotalSell) FROM Ch9_Q1); -- need to use compound select extrac the max value 3.98 first 
	
-- 3. Count Genre of top selling track
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId IN 
		(SELECT
			q1.TrackId
		FROM
			Ch9_Q1 AS q1 -- it's Q-one not Q-L
		WHERE
			q1.TotalSell = (SELECT MAX(q1.TotalSell) FROM Ch9_Q1 AS q1))
GROUP BY
	Genre
ORDER BY
	Count DESC;

-- 4. Create TABLE
CREATE TABLE Ch9_Q8 AS
SELECT
	g.Name AS Genre,
	COUNT(g.Name) AS Count
FROM
	Track AS t
LEFT JOIN
	Genre AS g
ON
	t.GenreId = g.GenreId
WHERE
	t.TrackId IN 
		(SELECT
			q1.TrackId
		FROM
			Ch9_Q1 AS q1 -- it's Q-one not Q-L
		WHERE
			q1.TotalSell = (SELECT MAX(q1.TotalSell) FROM Ch9_Q1 AS q1))
GROUP BY
	Genre
ORDER BY
	Count DESC;

-- 5. find % of YesSell/AllSell per Composer
SELECT
	ys.Genre,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q8 AS ys -- YesSell
LEFT JOIN
	Ch9_Q4a AS s -- AllSell, as does not work
ON
	ys.Genre = s.Genre
ORDER BY
	YesSellPercent DESC; 

-- 6. Create TABLE (YesSellPercent)
CREATE TABLE Ch9_Q8b AS
SELECT
	ys.Genre,
	ys.Count AS YesSellCount,
	s.Count AS AllSellCount,
	round((CAST (ys.Count AS FLOAT)/s.Count)*100,2) AS YesSellPercent
FROM
	Ch9_Q8 AS ys -- YesSell
LEFT JOIN
	Ch9_Q4a AS s -- AllSell, as does not work
ON
	ys.Genre = s.Genre
ORDER BY
	YesSellPercent DESC; </sql><sql name="Ch10.1">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: Create Views

*/



CREATE VIEW V_AvgTotal AS

SELECT 

	round(avg(total),2) AS [Average Total]

FROM

	Invoice;</sql><sql name="Ch10.2">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: Edit Views

*/



DROP VIEW &quot;main&quot;.&quot;V_AvgTotal&quot;;

CREATE VIEW V_AvgTotal AS

SELECT 

	avg(total) AS [Average Total]

FROM

	Invoice;</sql><sql name="Ch10.3">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: Views and Joins

*/



CREATE VIEW V_Tracks_InvoiceLine AS

SELECT

	il.InvoiceId,

	il.UnitPrice,

	il.Quantity,

	t.Name,

	t.Composer,

	t.Milliseconds

FROM

	InvoiceLine il

INNER JOIN

	Track t

ON

	il.TrackId = t.TrackId;</sql><sql name="Ch10.4">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: Detele Views

*/



DROP VIEW

	V_AvgTotal; </sql><sql name="Ch11.1">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: DML | Inserting Data

*/



INSERT INTO

	Artist(Name)

VALUES('Bob Marley');



-- Note: After running the INSERT statement here, make sure to run the DELETE statement in Ch11.3 to restore the original WSDA database.</sql><sql name="Ch11.2">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: DML | Updating Data

*/



UPDATE 

	Artist

SET 

	Name = 'Damien Marley'

WHERE 

	ArtistId = 276;



/*	

Note:

This code runs without errors even if the record you want to update does not exist, and no changes will be made to the original database.

Make sure to check that the record you want to update exists in advance.

*/</sql><sql name="Ch11.3">/*

Created By: Masae Wen

Create Date: 09/20/2024

Description: DML | Deleting Data

*/



DELETE FROM

	Artist

WHERE 

	ArtistId = 276;



/*	

Note:

This code runs without errors even if the record you want to delete does not exist, and no changes will be made to the original database.

Make sure to check that the record you want to delete exists in advance.

*/</sql><sql name="ExamQ12">/*

Created By: Masae Wen

Create Date: 09/23/2024

Description: Exam | Using the Execute SQL tab, compose the SQL query that answers the following question: 

*/



-- Q12 How many Customer LastNames start with G?

SELECT

	COUNT(*) AS [Number of Customers whose LastName starts with G]

FROM

	Customer

WHERE

	LastName like 'G%'; -- need to use like instead of =

			

</sql><sql name="ExamQ13">/*

Created By: Masae Wen

Create Date: 09/23/2024

Description: Exam | Using the Execute SQL tab, compose the SQL query that answers the following question: 

*/



-- Q13 Which track appears at the top of the Track table when sorted in descending order?

SELECT *

FROM

	Track

ORDER BY

	Name DESC;

			

</sql><sql name="ExamQ14">/*

Created By: Masae Wen

Create Date: 09/23/2024

Description: Exam | Using the Execute SQL tab, compose the SQL query that answers the following question: 

*/



-- Q14 How many tracks in the WSDA music database do not have a composer listed?

SELECT 

	COUNT(*) AS [Number of Tracks listed w/o a Composer]

FROM

	Track

WHERE

	Composer = 'unavailable';

			

</sql><sql name="ExamQ17">/*

Created By: Masae Wen

Create Date: 09/23/2024

Description: Exam | Using the Execute SQL tab, compose the SQL query that answers the following question: 

*/



-- Q17 How many invoices were billed to the city of Brussels?

SELECT 

	COUNT(*) AS [Number of Invoices billed to Brussels City]

FROM

	Invoice

WHERE

	BillingCity = 'Brussels';

			

</sql><current_tab id="35"/></tab_sql></sqlb_project>
